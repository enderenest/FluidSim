#version 430 core


struct ParticleVectors {
	vec4 position;
	vec4 predictedPosition;
	vec4 velocity;
};

struct SimulationParameters {
	float dt;
	float gravityAcceleration;
	float mass;
	float collisionDamping;
	float smoothingRadius;
	float targetDensity;
	float pressureMultiplier;
	float viscosityStrength;
	float nearDensityMultiplier;
	uint isInteracting;
	uint isPaused;
	float inputPositionX;
	float inputPositionY;
	float inputPositionZ;
	float interactionRadius;
	float interactionStrength;

	uint particleCount;
	uint paddedParticleCount;
	uint hashSize;
	float spacing;
	float particleRadius;
	float boundaryX;
	float boundaryY;
	float boundaryZ;
};

layout(local_size_x=512, local_size_y=1, local_size_z=1) in;

layout(std430, binding = 0) buffer VectorDataBuffer { ParticleVectors vecData[]; };
layout(std430, binding = 6) buffer SimParamsBuffer { SimulationParameters sim; };

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= sim.particleCount) return;

    vecData[i].velocity += vec4(0.0, -sim.gravityAcceleration * sim.dt, 0.0, 0.0);
    vecData[i].predictedPosition = vecData[i].position + vecData[i].velocity * sim.dt;
}
